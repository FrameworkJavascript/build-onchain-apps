On the "Message" text that appear above the "Say something" input, please add "ðŸ’Œ " before.

And for the number buttons (1, 2, 3, 4) please add a tooltip telling how much ETH each will send.

Please rename "Buy Us a Cupcake!" to "Buy us a Cupcake!"




To make the requested changes in `FormBuyCoffee.tsx`, you can update the "Message" label to include an emoji, add tooltips to the number buttons to show the ETH amount for each, and update the heading text. Here's how you can do it:

### Updated `FormBuyCoffee.tsx`
```typescript
72|      <h2 className="mb-5 w-full text-center text-2xl font-semibold text-white lg:text-left">
73|        Buy us a Cupcake!
74|      </h2>
...
95|        <div>
96|          <div className="mb-5">
97|            <Label htmlFor="name">ðŸ’Œ Message</Label>
98|            <TextArea
99|              id="message"
100|              placeholder="Say something"
101|              onChange={(evt) => setField('message', evt.target.value)}
102|              disabled={disabled}
103|              required
104|            />
105|          </div>
...
79|          <div className="mx-auto flex max-w-[300px] gap-3 lg:max-w-max">
80|            {COFFEE_COUNT.map((count) => (
81|              <button
82|                key={`num-coffee-btn-${count}`}
83|                type="button"
84|                className={clsx(
85|                  `${fields.coffeeCount === count ? 'bg-gradient-2' : 'border border-boat-color-orange'} block h-[40px] w-full rounded lg:w-[40px]`,
86|                )}
87|                onClick={() => setField('coffeeCount', count)}
88|                title={`${(GAS_COST * count).toFixed(4)} ETH`}
89|              >
90|                {count}
91|              </button>
92|            ))}
93|          </div>
```

### Key Changes:
1. **Line 73**: Updated the heading text to "Buy us a Cupcake!".
2. **Lines 97-104**: Added an emoji "ðŸ’Œ" before the "Message" label.
3. **Lines 88**: Added a `title` attribute to each button to show the ETH amount that corresponds to the number of cupcakes selected. This uses the `GAS_COST` multiplied by the `count` and formats it to 4 decimal places.

These changes will make the UI more informative and visually appealing by clearly indicating the cost associated with each button and enhancing the message input label.







Need another amazing thing from you: fetch CoinGecko's public API, and get the current price of ETH. Based on that, calc the price of an ETH amount; show it on the tooltip and on the "Send x cupcake for x ETH" button, in the following format for each, in order:

- "x ETH / $x"
- "Send x cupcake for x ETH ($x)"






To fetch the current price of ETH from CoinGecko's public API and use it to calculate the price in USD for the tooltips and the button in your `FormBuyCoffee.tsx`, you'll need to make an API call and update your component accordingly. Here's how you can do it:

### Step 1: Fetch ETH Price
First, you'll need to fetch the current price of ETH from CoinGecko. You can use the `fetch` API to do this. Add this functionality in your component:

```typescript
const [ethPrice, setEthPrice] = useState<number | null>(null);

useEffect(() => {
  const fetchEthPrice = async () => {
    const response = await fetch('https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd');
    const data = await response.json();
    setEthPrice(data.ethereum.usd);
  };

  fetchEthPrice();
}, []);
```

### Step 2: Update Tooltip and Button Content
Next, update the tooltip and the button content to include the USD price calculation:

```typescript
{COFFEE_COUNT.map((count) => (
  <button
    key={`num-coffee-btn-${count}`}
    type="button"
    className={clsx(
      `${fields.coffeeCount === count ? 'bg-gradient-2' : 'border border-boat-color-orange'} block h-[40px] w-full rounded lg:w-[40px]`,
    )}
    onClick={() => setField('coffeeCount', count)}
    title={`${(GAS_COST * count).toFixed(4)} ETH / $${(ethPrice ? (GAS_COST * count * ethPrice).toFixed(2) : 'loading...')}`}
  >
    {count}
  </button>
))}
```

```typescript
<Button
  buttonContent={
    <>
      Send {fields.coffeeCount} cupcake{fields.coffeeCount > 1 ? 's' : ''} for{' '}
      {(GAS_COST * fields.coffeeCount).toFixed(4)} ETH (${ethPrice ? (GAS_COST * fields.coffeeCount * ethPrice).toFixed(2) : 'loading...'})
    </>
  }
  type="submit"
  disabled={disabled}
/>
```

### Full Integration
Here's how you might integrate these changes into your existing component:

```typescript
import { useCallback, useState, useEffect } from 'react';
...(other imports)...

function FormBuyCoffee({ refetchMemos }: FormBuyCoffeeProps) {
  const contract = useBuyMeACoffeeContract();
  const { fields, setField, resetFields } = useFields<Fields>(initFields);
  const [showSocialInputs, setShowSocialInputs] = useState(false);
  const [ethPrice, setEthPrice] = useState<number | null>(null);

  useEffect(() => {
    const fetchEthPrice = async () => {
      const response = await fetch('https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd');
      const data = await response.json();
      setEthPrice(data.ethereum.usd);
    };

    fetchEthPrice();
  }, []);

  ...(existing component logic)...
}
```

This code will fetch the current price of ETH when the component mounts and update the tooltip and button content dynamically based on the fetched price. Make sure to handle the loading state appropriately, as shown in the button content, where it displays 'loading...' if the price has not yet been fetched.
