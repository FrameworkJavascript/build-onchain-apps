Describe the bug and the steps to reproduce it

    Create a folder called my-test
    In a console in my-test run npx @coinbase/build-onchain-apps@latest create
    Enter . as the name of the project
    Select any options desired
    Observe failure: Directory /Users/briandoyle/src/Zora-Tutorial-Test already exists.

What's the expected behavior?

Script should accept . as the project name and create a project in the root of the current folder
What version of the libraries are you using?

    BOAT v0.31.0





### Bug Description

The script fails when attempting to create a project in the current directory using `.` as the project name. The error message indicates that the directory already exists, which is expected behavior when using `.` to denote the current directory.

### Steps to Reproduce

1. Create a folder named `my-test`.
2. Open a console in the `my-test` directory.
3. Run the command `npx @coinbase/build-onchain-apps@latest create`.
4. Enter `.` as the name of the project when prompted.
5. Select any additional options as desired.
6. Observe the failure with the message indicating that the directory already exists.

### Expected Behavior

The script should recognize that using `.` as the project name implies the intention to create the project in the current directory. It should proceed without treating this as an error, assuming the directory's existence is intentional for project setup.

### Analysis of the Issue

The issue arises from the `checkProjectDir` function, which checks if the specified project directory exists and throws an error if it does. This function does not account for the scenario where the user might want to initialize the project in the current directory.


```6:11:create/checkProjectDir.ts
export function checkProjectDir(projectDir: string) {
  if (fs.existsSync(projectDir)) {
    prompts.log.error(color.red(`Directory ${projectDir} already exists.`));
    removeDownloadedApps(APPS_ENGINE_DIR);
    process.exit(1);
  }
```


### Suggested Fix

Modify the `checkProjectDir` function to allow initialization in the current directory if `.` is used as the project name. This could involve adding a condition to bypass the error if the directory exists but is intended as the project's root.

Here's a possible modification:

```typescript
export function checkProjectDir(projectDir: string) {
  if (fs.existsSync(projectDir) && projectDir !== '.') {
    prompts.log.error(color.red(`Directory ${projectDir} already exists.`));
    removeDownloadedApps(APPS_ENGINE_DIR);
    process.exit(1);
  }
}
```

This change ensures that if the project directory is the current directory (denoted by `.`), the script does not exit with an error, allowing the project setup to proceed.






What filename to modify?




To address the issue where the script fails when attempting to create a project in the current directory using `.` as the project name, you should modify the file:

**Filename:** `create/checkProjectDir.ts`

Here is the relevant section of the code you need to modify:

```6:11:create/checkProjectDir.ts
export function checkProjectDir(projectDir: string) {
  if (fs.existsSync(projectDir)) {
    prompts.log.error(color.red(`Directory ${projectDir} already exists.`));
    removeDownloadedApps(APPS_ENGINE_DIR);
    process.exit(1);
  }
```






Does this modification take into account if the "." directory already has files? Should ensure it is empty!




To ensure that the directory specified by `.` is empty before proceeding with the project creation, you can modify the `checkProjectDir` function to check not only if the directory exists but also if it is empty. This can be done by reading the contents of the directory and checking if the array of files is empty.

Here's how you can modify the `checkProjectDir` function in the `create/checkProjectDir.ts` file:

```typescript:create/checkProjectDir.ts
import * as fs from 'fs';
import * as prompts from '@clack/prompts';
import * as color from 'picocolors';
import { APPS_ENGINE_DIR, removeDownloadedApps } from '../utils/apps';

export function checkProjectDir(projectDir: string) {
  if (fs.existsSync(projectDir)) {
    if (projectDir === '.') {
      const files = fs.readdirSync(projectDir);
      if (files.length > 0) {
        prompts.log.error(color.red(`The directory ${projectDir} is not empty.`));
        removeDownloadedApps(APPS_ENGINE_DIR);
        process.exit(1);
      }
    } else {
      prompts.log.error(color.red(`Directory ${projectDir} already exists.`));
      removeDownloadedApps(APPS_ENGINE_DIR);
      process.exit(1);
    }
  }
}
```

This modification checks if the directory is the current directory (`.`). If it is, it then checks if the directory is empty by using `fs.readdirSync(projectDir)` which returns an array of files in the directory. If the array is not empty, it logs an error and exits, ensuring that no project is created in a non-empty directory.






Will it still check for not creating a duplicate folder when not using "."?




Yes, the modified `checkProjectDir` function will still check for the existence of a directory and prevent the creation of a project in a directory that already exists when not using `.`. This is handled by the `else` block in the function.

Here's the relevant part of the function that handles this:

```typescript:create/checkProjectDir.ts
if (projectDir !== '.') {
  prompts.log.error(color.red(`Directory ${projectDir} already exists.`));
  removeDownloadedApps(APPS_ENGINE_DIR);
  process.exit(1);
}
```

This block ensures that if the directory specified by `projectDir` exists and is not the current directory (`.`), it will log an error and exit the process, thus preventing the creation of a project in an already existing directory.

For reference, see the code from lines 14 to 17 in the `checkProjectDir.ts` file.
